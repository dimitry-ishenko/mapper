////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2015 Dimitry Ishenko
// Distributed under the GNU GPL v2. For full terms please visit:
// http://www.gnu.org/licenses/gpl.html
//
// Contact: dimitry (dot) ishenko (at) (gee) mail (dot) com

////////////////////////////////////////////////////////////////////////////////
#ifndef EVENT_HPP
#define EVENT_HPP

////////////////////////////////////////////////////////////////////////////////
#include <map>
#include <set>
#include <string>

#include <linux/input.h>
#include <linux/uinput.h>

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
namespace app
{

////////////////////////////////////////////////////////////////////////////////
#include "event_gen.hpp"
enum event;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
inline constexpr int type(app::event e) noexcept { return e >> 16; }
inline constexpr int code(app::event e) noexcept { return e & 0xffff; }

inline constexpr bool is_key(app::event e) noexcept { return type(e) == EV_KEY; }
inline constexpr bool is_rel(app::event e) noexcept { return type(e) == EV_REL; }
inline constexpr bool is_abs(app::event e) noexcept { return type(e) == EV_ABS; }

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
typedef std::set<event> events;

////////////////////////////////////////////////////////////////////////////////
inline app::events operator|(app::event x, app::event y)
{
    return app::events { x, y };
}

////////////////////////////////////////////////////////////////////////////////
inline app::events operator|(app::events x, app::event y)
{
    x.insert(y);
    return x;
}

////////////////////////////////////////////////////////////////////////////////
inline app::events operator|(app::event x, app::events y)
{
    return y | x;
}

////////////////////////////////////////////////////////////////////////////////
template<typename T>
inline app::events operator|(app::events x, T&& y)
{
    x.insert(std::begin(y), std::end(y));
    return x;
}

////////////////////////////////////////////////////////////////////////////////
inline app::events range(app::event min, app::event max)
{
    app::events events;
    for(int ri = min; ri <= max; ++ri) events.insert(static_cast<app::event>(ri));
    return events;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////
#endif
