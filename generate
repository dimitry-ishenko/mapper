#!/bin/bash

DEFAULT_INPUT="/usr/include/linux/input.h"

if [[ "${1}" == "-h" || "${1}" == "--help" ]]; then
    echo "Usage: ${0} [ /path/to/input.h ]"
    echo "Default path: ${DEFAULT_INPUT}"
    echo
    exit 0
elif [[ -n "${1}" ]]; then
    INPUT="${1}"
else
    INPUT="${DEFAULT_INPUT}"
fi

events=$(sed -rne 's/^(\s*)(#define\s+)((KEY|BTN|REL|ABS)_[a-zA-Z0-9_]+)(\s+.*)$/\3/p' "${INPUT}")

cat <<EOF
////////////////////////////////////////////////////////////////////////////////
#ifndef EVENT_HPP
#define EVENT_HPP

////////////////////////////////////////////////////////////////////////////////
#include <map>
#include <string>

#include <linux/input.h>

#define EV_BTN EV_KEY

const std::map<int, int> type_map =
{
    { EV_KEY << 16, UI_SET_KEYBIT },
    { EV_REL << 16, UI_SET_RELBIT },
    { EV_ABS << 16, UI_SET_ABSBIT },
};

constexpr int CODE_MASK = 0xffff;
constexpr int EV_MASK = CODE_MASK << 16;

////////////////////////////////////////////////////////////////////////////////
namespace _imp
{
enum
{
EOF
for event in ${events}; do
    printf '    _%-20s = %s,\n' ${event} ${event}
done
cat <<EOF
};
}

////////////////////////////////////////////////////////////////////////////////
EOF
for event in ${events}; do
    echo "#undef ${event}"
done
cat <<EOF

////////////////////////////////////////////////////////////////////////////////
enum event
{
EOF
for event in ${events}; do
    printf '    %-20s = (EV_%s << 16) + _imp::_%s,\n' ${event} ${event:0:3} ${event}
done
cat <<EOF
};

////////////////////////////////////////////////////////////////////////////////
const std::map<event, std::string> event_name =
{
EOF
for event in ${events}; do
    printf '    { %-20s , "%s" },\n' ${event} ${event}
done
cat <<EOF
};

////////////////////////////////////////////////////////////////////////////////
#endif
EOF
